/*
 * weights.cpp
 *
 *  Created on: Oct 11, 2023
 *      Author: Matthew Hinton
 */

#include "weights.h"

using namespace std;

void set_ngram_data() {
	// Calculate and set ngramLength
	ngramLength = 3;
	double case_ngramLength{ };
	for (int i{ }; i < LayoutSize; i++) {
		for (int j{ }; j < LayoutSize; j++) {
			for (int k{ }; k < LayoutSize; k++) {
				for (int l{ }; l < LayoutSize; l++) {
					for (int m{ }; m < LayoutSize; m++) {
						for (int n{ }; n < LayoutSize; n++) {
							case_ngramLength = (digraphScores[i][n] - digraphScores[i][j] - digraphScores[m][n]) / digraphScores[k][l] + 2;
							if (case_ngramLength > ngramLength) ngramLength = ceil(case_ngramLength); // <-- if case_ngramLength is too high, may run into memory allocation problems
							// ngramLength cannot also be more than 13 while ngrams are still being generated by index
						}
					}
				}
			}
		}
	}

	// Set num_of_ngrams <-- needed anymore?
	//num_of_ngrams = pow(LayoutSize, ngramLength);
}

// Set parameters for keyboard scoring data
int setWeights(string weightsFile) {

	// Populate digraphScores[][] with all weights from weights file

	fs::path weightsDir = fs::current_path() / "weights";
	ifstream weights(weightsDir / weightsFile);

	string line;
	double value;

	if(!weights.is_open()) throw runtime_error("setWeights: error: Could not open weights file\n");

	if (weights.good()) {

		int rowIndex{ };
		while (getline(weights, line)) {
			stringstream ss(line);

			int columnIndex{ };
			while (ss >> value) {
				if (rowIndex >= LayoutSize || columnIndex >= LayoutSize) throw runtime_error("setWeights: error: Misformed weights file\n");
				digraphScores[rowIndex][columnIndex] = value;
				if (ss.peek() == ',') {
					ss.ignore();
				}
				columnIndex++;
			}
			rowIndex++;
		}

	}

	weights.close();

	set_ngram_data();

	return 0;
}

void typingTest(string weightsFile) {
	{
		// interactive test to find digraph scores
	}

	set_ngram_data();

	fs::path weightsDir = fs::current_path() / "weights";
	ofstream weights(weightsDir / weightsFile);

	for (int i{ }; i < LayoutSize; i++) {
		for (int j{ }; j < LayoutSize; j++) {
			weights << digraphScores[i][j];
			if (j != LayoutSize - 1) weights << ",";
		}
		if (i != LayoutSize - 1) weights << "\n";
	}

	weights.close();
}





/*
void initializeDigraphScores() {
	for (int i{ }; i < sizeof(digraphScores)/sizeof(digraphScores[0]); i++) {
		for (int j{ }; j < sizeof(digraphScores[i])/sizeof(digraphScores[i][0]); j++) {
			digraphScores[i][j] = 0.0;
		}
	}
}
*/
